@model IEnumerable<Equipment.Models.EquipmentWithDepartment>

@using GridMvc.Html

@{  
    ViewBag.Title = "Details";  
}


<h2>Equipment</h2>
<p>
    @Html.ActionLink("Create New", "Create")

</p>

<link href="@Url.Content("~/Content/Gridmvc.css")" rel="stylesheet" />
<script src="@Url.Content("~/Scripts/gridmvc.min.js")"></script>
<script type="text/javascript">
    function GetChar() {

        var id = document.getElementById("txtsearch").value;
        $.ajax({
            type: "POST",
            url: "/Equipment/Index",
            data: '{serach: "' + id + '" }',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {


            }
        });
    }
    $(function () {
        $('#txtsearch').change(function () {
            //Content to send 
            var yourText = $(this).val();

            //Post the content of your Textbox to your "YourAction" action in "YourController"
            $.post('@Url.Action("Index", "Equipment")', { "serach": yourText }, function (data) {
                //Do something with the results here

            });
        });
    });
</script>
@{  
    Layout = "~/Views/shared/_Layout.cshtml";
      
}


<html>

<body>

    <div class="table-responsive">
        <div style="text-align: right">
            @using (Html.BeginForm("Index", "Equipment", FormMethod.Get))
            {
                <div class="form-group">
                    Search: @Html.TextBox("Search", ViewBag.CurrentFilter as string)
                    <input type="submit" value="Search" class="btn btn-default" id="btnSubmit" />
                </div>
            }
        </div>

        <table class="table">
            @Html.Grid(Model).Columns(columns =>
                    {
                        columns.Add(c => c.department.Name).Titled("Department").Filterable(false);
                        columns.Add(c => c.equipment.Asset).Titled("Asset").Filterable(false);
                        columns.Add(c => c.equipment.Category).Titled("Category").Filterable(false);
                        columns.Add(c => c.equipment.Specification).Titled("Specification").Filterable(false);
                        columns.Add(c => c.equipment.Brand).Titled("Brand").Filterable(false);
                        //columns.Add(c => c.PurchasedVendorDetails).Titled("Purchased Vendor Details").Filterable(false);
                        //columns.Add(c => c.CalibrationVendorDetails).Titled("Calibration Vendor Details").Filterable(false);
                        //columns.Add(c => c.PurchasedVendorEmail).Titled("Purchased Vendor Email").Filterable(false);
                        //columns.Add(c => c.CalibrationVendorEmail).Titled("Calibration Vendor Email").Filterable(false);
                        columns.Add(c => c.equipment.PONo).Titled("PONo").Filterable(false);
                        columns.Add(c => c.equipment.PODate).Format("{0:dd/MM/yyyy}").Titled("PO Date").Filterable(false);
                        columns.Add(c => c.equipment.RecievedDate).Format("{0:dd/MM/yyyy}").Titled("Recieved Date").Filterable(false);
                        // columns.Add(c => c.Factoryunit).Titled("Factory Unit").Filterable(false);
                        // columns.Add(c => c.Department).Titled("Department").Filterable(false);
                        //columns.Add(c => c.Responsible).Titled("Responsible").Filterable(false);
                        //columns.Add(c => c.Emailid).Titled("Emailid").Filterable(false);
                        //columns.Add(c => c.Empcd).Titled("Empcd").Filterable(false);
                        //columns.Add(c => c.Specification1).Titled("Specification").Filterable(false);
                        //columns.Add(c => c.Purchaseddate).Format("{0:dd/MM/yyyy}").Titled("Purchased Date").Filterable(false);
                        //columns.Add(c => c.Value).Titled("Value").Filterable(false);
                        //columns.Add(c => c.Age).Titled("Age").Filterable(false);
                        //columns.Add(c => c.Prevcalibration).Titled("Prev Calibration").Filterable(false);
                        //columns.Add(c => c.Calibrationduedate).Format("{0:dd/MM/yyyy}").Titled("Calibration Due Date").Filterable(false);
                        columns.Add(c => c.equipment.Active).Titled("Active").Filterable(false);
                        //columns.Add(c => c.HandedOverto).Titled("Handed Over To").Filterable(false);
                        //columns.Add(c => c.Remark1).Titled("Remark1").Filterable(false);
                        //columns.Add(c => c.Remark2).Titled("Remark2").Filterable(false);
                        columns.Add().Encoded(false).Sanitized(false).Titled("Image").Filterable(false).Sortable(false).RenderValueAs(c => @<div style="width:100px;"><img alt="Image" src="data:image/jpeg;base64,@(Convert.ToBase64String(c.equipment.Photo))" style="width:70px;height:70px" /></div>);
                        columns.Add()
                        .Encoded(false)
                        .Sanitized(false)
                        .RenderValueAs(o => Html.ActionLink("View", "Details", new { id = o.equipment.Id }));
                        columns.Add()
                        .Encoded(false)
                        .Sanitized(false)
                        .RenderValueAs(o => Html.ActionLink("Edit", "Edit", new { id = o.equipment.Id }));
                        columns.Add()
                        .Encoded(false)
                        .Sanitized(false)
                        .RenderValueAs(o => Html.ActionLink("Delete", "Delete", new { id = o.equipment.Id }));

                    }).WithPaging(10).Sortable(true)
        </table>
    </div>
</body>
</html>





